// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Spinners.h"
#include "Spinners_Config.h"
#include "../RobotMap.h"
#include "Commands/OperateSpinners.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Spinners::Spinners() : Subsystem("Spinners") {
	myConfig = new Spinners_Config();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	spinnerRightTalon = RobotMap::spinnersSpinnerRightTalon;
	spinnerLeftTalon = RobotMap::spinnersSpinnerLeftTalon;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	RetrieveConfig();
	Configure();
}

Spinners::~Spinners()
{
	delete myConfig;
}

void Spinners::RetrieveConfig()
{
	myConfig->Spinners_InRate = Preferences::GetInstance()->GetFloat("Spinners::InRate");
	myConfig->Spinners_OutRate = Preferences::GetInstance()->GetFloat("Spinners::OutRate");
	myConfig->Spinners_RotRate = Preferences::GetInstance()->GetFloat("Spinners::RotRate");
	myConfig->Spinners_LeftTalon_Enabled = Preferences::GetInstance()->GetBoolean("Spinners::LeftTalon::Enabled");
	myConfig->Spinners_LeftTalon_CANID = Preferences::GetInstance()->GetInt("Spinners::LeftTalon::CANID");
	myConfig->Spinners_LeftTalon_PosIn = Preferences::GetInstance()->GetBoolean("Spinners::LeftTalon::PosIn");
	myConfig->Spinners_RightTalon_Enabled = Preferences::GetInstance()->GetBoolean("Spinners::RightTalon::Enabled");
	myConfig->Spinners_RightTalon_CANID = Preferences::GetInstance()->GetInt("Spinners::RightTalon::CANID");
	myConfig->Spinners_RightTalon_PosIn = Preferences::GetInstance()->GetBoolean("Spinners::RightTalon::PosIn");
}

void Spinners::StoreConfig()
{
	Preferences::GetInstance()->PutFloat("Spinners::InRate",myConfig->Spinners_InRate);
	Preferences::GetInstance()->PutFloat("Spinners::OutRate",myConfig->Spinners_OutRate);
	Preferences::GetInstance()->PutFloat("Spinners::RotRate",myConfig->Spinners_RotRate);
	Preferences::GetInstance()->PutBoolean("Spinners::LeftTalon::Enabled",myConfig->Spinners_LeftTalon_Enabled);
	Preferences::GetInstance()->PutInt("Spinners::LeftTalon::CANID",myConfig->Spinners_LeftTalon_CANID);
	Preferences::GetInstance()->PutBoolean("Spinners::LeftTalon::PosIn",myConfig->Spinners_LeftTalon_PosIn);
	Preferences::GetInstance()->PutBoolean("Spinners::RightTalon::Enabled",myConfig->Spinners_RightTalon_Enabled);
	Preferences::GetInstance()->PutInt("Spinners::RightTalon::CANID",myConfig->Spinners_RightTalon_CANID);
	Preferences::GetInstance()->PutBoolean("Spinners::RightTalon::PosIn",myConfig->Spinners_RightTalon_PosIn);
}

void Spinners::Configure()
{
	LPosIn = myConfig->Spinners_LeftTalon_PosIn;
	RPosIn = myConfig->Spinners_RightTalon_PosIn;
	InRate = myConfig->Spinners_InRate;
	OutRate = myConfig->Spinners_OutRate;
	RotRate = myConfig->Spinners_RotRate;
}


void Spinners::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new OperateSpinners());
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Spinners::Intake()
{
	// printf("Inrate %f\n", InRate);
	if (RPosIn)
	{
		spinnerRightTalon->Set(InRate);
	} else
	{
		spinnerRightTalon->Set(0 - InRate);
	}

	if (LPosIn)
	{
		spinnerLeftTalon->Set(InRate);
	} else
	{
		spinnerLeftTalon->Set(0 - InRate);
	}
}

void Spinners::Expel()
{
	// printf("Outrate %f\n", OutRate);
	if (RPosIn)
	{
		spinnerRightTalon->Set(0 - OutRate);
	} else
	{
		spinnerRightTalon->Set(OutRate);
	}

	if (LPosIn)
	{
		spinnerLeftTalon->Set(0 - OutRate);
	} else
	{
		spinnerLeftTalon->Set(OutRate);
	}
}

void Spinners::RotateCW()
{
	if (RPosIn)
	{
		spinnerRightTalon->Set(0 - RotRate);
	} else
	{
		spinnerRightTalon->Set(RotRate);
	}

	if (LPosIn)
	{
		spinnerLeftTalon->Set(RotRate);
	} else
	{
		spinnerLeftTalon->Set(0 - RotRate);
	}
}

void Spinners::RotateCCW()
{
	if (RPosIn)
	{
		spinnerRightTalon->Set(RotRate);
	} else
	{
		spinnerRightTalon->Set(0 - RotRate);
	}

	if (LPosIn)
	{
		spinnerLeftTalon->Set(0 - RotRate);
	} else
	{
		spinnerLeftTalon->Set(RotRate);
	}
}


void Spinners::Stop()
{
	spinnerLeftTalon->Set(0);
	spinnerRightTalon->Set(0);
}
