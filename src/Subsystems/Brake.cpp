// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Brake.h"
#include "../RobotMap.h"
#include "Brake_Config.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES


Brake::Brake() : Subsystem("Brake") {
	myConfig = new Brake_Config();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	brakeSolenoid = RobotMap::brakeBrakeSolenoid;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	myConfig->Brake_ActiveIsEngaged = true;
	RetrieveConfig();
}
    
Brake::~Brake()
{
	delete myConfig;
}

void Brake::RetrieveConfig()
{
	myConfig->Brake_PCMID = Preferences::GetInstance()->GetInt("Brake::PCMID");
	myConfig->Brake_BrakeSolenoid = Preferences::GetInstance()->GetInt("Brake::BrakeSolenoid");
	myConfig->Brake_ActiveIsEngaged = Preferences::GetInstance()->GetBoolean("Brake::ActiveIsEngaged");
}

void Brake::StoreConfig()
{
	Preferences::GetInstance()->PutInt("Brake::PCMID",myConfig->Brake_PCMID);
	Preferences::GetInstance()->PutInt("Brake::BrakeSolenoid",myConfig->Brake_BrakeSolenoid);
	Preferences::GetInstance()->PutBoolean("Brake::ActiveIsEngaged",myConfig->Brake_ActiveIsEngaged);
}

void Brake::Configure()
{
	// Do Nothing.
}

void Brake::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Brake::Engage()
{
	brakeSolenoid->Set(myConfig->Brake_ActiveIsEngaged);
}

void Brake::Release()
{
	brakeSolenoid->Set(!myConfig->Brake_ActiveIsEngaged);
}

bool Brake::IsEngaged()
{
	bool retval = brakeSolenoid->Get();

	if ((myConfig->Brake_ActiveIsEngaged && retval) || (!myConfig->Brake_ActiveIsEngaged && !retval))
	{
		return true;
	}
	return false;
}
