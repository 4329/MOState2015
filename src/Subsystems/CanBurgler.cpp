// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "CanBurgler.h"
#include "../RobotMap.h"
#include "CanBurgler_Config.h"

CanBurgler::CanBurgler() : Subsystem("CanBurgler") {
	myConfig = new CanBurgler_Config();
	myConfig->RightCanBurgler_ExtendedIsForward = true;
	myConfig->LeftCanBurgler_ExtendedIsForward = true;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	RightCanBurglerSolenoid = RobotMap::canBurglerCanBurglerRightSolenoid;
	LeftCanBurglerSolenoid = RobotMap::canBurglerCanBurglerLeftSolenoid;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	RetrieveConfig();

}

CanBurgler::~CanBurgler()
{
	delete myConfig;
}

void CanBurgler::RetrieveConfig()
{
	myConfig->RightCanBurgler_PCMID = Preferences::GetInstance()->GetInt("RightCanBurgler::PCMID");
	myConfig->RightCanBurgler_CanBurglerForwardSolenoid = Preferences::GetInstance()->GetInt("RightCanBurgler::CanBurglerForwardSolenoid");
	myConfig->RightCanBurgler_CanBurglerReverseSolenoid = Preferences::GetInstance()->GetInt("RightCanBurgler::CanBurglerReverseSolenoid");
	myConfig->RightCanBurgler_ExtendedIsForward = Preferences::GetInstance()->GetBoolean("RightCanBurgler::ExtendedIsForward");
	myConfig->LeftCanBurgler_PCMID = Preferences::GetInstance()->GetInt("LeftCanBurgler::PCMID");
	myConfig->LeftCanBurgler_CanBurglerForwardSolenoid = Preferences::GetInstance()->GetInt("LeftCanBurgler::CanBurglerForwardSolenoid");
	myConfig->LeftCanBurgler_CanBurglerReverseSolenoid = Preferences::GetInstance()->GetInt("LeftCanBurgler::CanBurglerReverseSolenoid");
	myConfig->LeftCanBurgler_ExtendedIsForward = Preferences::GetInstance()->GetBoolean("LeftCanBurgler::ExtendedIsForward");
}

void CanBurgler::StoreConfig()
{
	Preferences::GetInstance()->PutInt("RightCanBurgler::PCMID", myConfig->RightCanBurgler_PCMID);
	Preferences::GetInstance()->PutInt("RightCanBurgler::CanBurglerForwardSolenoid",myConfig->RightCanBurgler_CanBurglerForwardSolenoid);
	Preferences::GetInstance()->PutInt("RightCanBurgler::CanBurglerReverseSolenoid",myConfig->RightCanBurgler_CanBurglerReverseSolenoid);
	Preferences::GetInstance()->PutBoolean("RightCanBurgler::ExtendedIsForward",myConfig->RightCanBurgler_ExtendedIsForward);
	Preferences::GetInstance()->PutInt("LeftCanBurgler::PCMID",myConfig->LeftCanBurgler_PCMID);
	Preferences::GetInstance()->PutInt("LeftCanBurgler::CanBurglerForwardSolenoid",myConfig->LeftCanBurgler_CanBurglerForwardSolenoid);
	Preferences::GetInstance()->PutInt("LeftCanBurgler::CanBurglerReverseSolenoid",myConfig->LeftCanBurgler_CanBurglerReverseSolenoid);
	Preferences::GetInstance()->PutBoolean("LeftCanBurgler::ExtendedIsForward",myConfig->LeftCanBurgler_ExtendedIsForward);
}

void CanBurgler::Configure()
{
	// Do Nothing.
}

void CanBurgler::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void CanBurgler::ExtendRight()
{
	if (myConfig->RightCanBurgler_ExtendedIsForward)
	{
		RightCanBurglerSolenoid->Set(DoubleSolenoid::kForward);
	} else
	{
		RightCanBurglerSolenoid->Set(DoubleSolenoid::kReverse);
	}
}

void CanBurgler::ExtendLeft()
{
	if (myConfig->LeftCanBurgler_ExtendedIsForward)
	{
		LeftCanBurglerSolenoid->Set(DoubleSolenoid::kForward);
	} else
	{
		LeftCanBurglerSolenoid->Set(DoubleSolenoid::kReverse);
	}
}

void CanBurgler::ExtendBoth()
{
	ExtendRight();
	ExtendLeft();
}

void CanBurgler::RetractRight()
{
	if (myConfig->RightCanBurgler_ExtendedIsForward)
	{
		RightCanBurglerSolenoid->Set(DoubleSolenoid::kReverse);
	} else
	{
		RightCanBurglerSolenoid->Set(DoubleSolenoid::kForward);
	}
}

void CanBurgler::RetractLeft()
{
	if (myConfig->LeftCanBurgler_ExtendedIsForward)
	{
		LeftCanBurglerSolenoid->Set(DoubleSolenoid::kReverse);
	} else
	{
		LeftCanBurglerSolenoid->Set(DoubleSolenoid::kForward);
	}
}

void CanBurgler::RetractBoth()
{
	RetractRight();
	RetractLeft();
}

bool CanBurgler::IsRightExtended()
{
	DoubleSolenoid::Value retval = RightCanBurglerSolenoid->Get();

	if ( (myConfig->RightCanBurgler_ExtendedIsForward && (retval == DoubleSolenoid::kForward)) || (!myConfig->RightCanBurgler_ExtendedIsForward && (retval == DoubleSolenoid::kReverse)))
	{
		return true;
	}
	return false;
}

bool CanBurgler::IsLeftExtended()
{
	DoubleSolenoid::Value retval = LeftCanBurglerSolenoid->Get();

	if ( (myConfig->LeftCanBurgler_ExtendedIsForward && (retval == DoubleSolenoid::kForward)) || (!myConfig->LeftCanBurgler_ExtendedIsForward && (retval == DoubleSolenoid::kReverse)))
	{
		return true;
	}
	return false;
}
