// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "MoveFwdDriveByVector.h"

MoveFwdDriveByVector::MoveFwdDriveByVector(int heading, float inches, int timeout) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::forwardDrive);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	_heading = heading;
	distance = inches;
	MaxFDThrottle = Robot::autonomousConfig->Autonomous_MaxFDThrottle;
	ThrottleRamp = Robot::autonomousConfig->Autonomous_ThrottleRamp;
	Throttle = 0.0;
	first = false;
	timeo = timeout;
}

// Called just before this Command runs the first time
void MoveFwdDriveByVector::Initialize() {
	Robot::forwardDrive->Set_VoltageMode();
	first = false;
	printf("MFDBV Setting Timeout %d\n", timeo);
	SetTimeout(timeo);
}

// Called repeatedly when this Command is scheduled to run
void MoveFwdDriveByVector::Execute() {
	if (first == false)
	{
		first = true;
		printf("MFDBV exe setting zero points. \n");
		Robot::forwardDrive->Zero_Encoders();
		Robot::forwardDrive->SetManualDistance(distance);
		Throttle = 0.0;
	}
	if (distance < 0)
	{
		if (Throttle > (-1 * MaxFDThrottle) )
		{
			Throttle -= ThrottleRamp;
		}
	} else
	{
		if (Throttle < MaxFDThrottle )
		{
			Throttle += ThrottleRamp;
		}
	}
	Robot::forwardDrive->SetDrive_Arcade(Throttle, 0 ,true);
}

// Make this return true when this Command no longer needs to run execute()
bool MoveFwdDriveByVector::IsFinished() {
	return Robot::forwardDrive->AtCommandedPosition();
}

// Called once after isFinished returns true
void MoveFwdDriveByVector::End() {
	Robot::forwardDrive->Stop();
	Throttle = 0.0;
	first = false;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MoveFwdDriveByVector::Interrupted() {

}
