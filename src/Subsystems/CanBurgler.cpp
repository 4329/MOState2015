// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "CanBurgler.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

static bool r_extended = true;
static bool l_extended = true;

CanBurgler::CanBurgler() : Subsystem("CanBurgler") {
	r_extended = Preferences::GetInstance()->GetBoolean("RightCanBurgler::ExtendedIsForward");
	l_extended = Preferences::GetInstance()->GetBoolean("LeftCanBurgler::ExtendedIsForward");
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	RightCanBurglerSolenoid = RobotMap::canBurglerCanBurglerRightSolenoid;
	LeftCanBurglerSolenoid = RobotMap::canBurglerCanBurglerLeftSolenoid;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void CanBurgler::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void CanBurgler::ExtendRight()
{
	if (r_extended)
	{
		RightCanBurglerSolenoid->Set(DoubleSolenoid::kForward);
	} else
	{
		RightCanBurglerSolenoid->Set(DoubleSolenoid::kReverse);
	}
}

void CanBurgler::ExtendLeft()
{
	if (l_extended)
	{
		LeftCanBurglerSolenoid->Set(DoubleSolenoid::kForward);
	} else
	{
		LeftCanBurglerSolenoid->Set(DoubleSolenoid::kReverse);
	}
}

void CanBurgler::ExtendBoth()
{
	ExtendRight();
	ExtendLeft();
}

void CanBurgler::RetractRight()
{
	if (r_extended)
	{
		RightCanBurglerSolenoid->Set(DoubleSolenoid::kReverse);
	} else
	{
		RightCanBurglerSolenoid->Set(DoubleSolenoid::kForward);
	}
}

void CanBurgler::RetractLeft()
{
	if (l_extended)
	{
		LeftCanBurglerSolenoid->Set(DoubleSolenoid::kReverse);
	} else
	{
		LeftCanBurglerSolenoid->Set(DoubleSolenoid::kForward);
	}
}

void CanBurgler::RetractBoth()
{
	RetractRight();
	RetractLeft();
}

bool CanBurgler::IsRightExtended()
{
	DoubleSolenoid::Value retval = RightCanBurglerSolenoid->Get();

	if ( (r_extended && (retval == DoubleSolenoid::kForward)) || (!r_extended && (retval == DoubleSolenoid::kReverse)))
	{
		return true;
	}
	return false;
}

bool CanBurgler::IsLeftExtended()
{
	DoubleSolenoid::Value retval = LeftCanBurglerSolenoid->Get();

	if ( (l_extended && (retval == DoubleSolenoid::kForward)) || (!l_extended && (retval == DoubleSolenoid::kReverse)))
	{
		return true;
	}
	return false;
}
