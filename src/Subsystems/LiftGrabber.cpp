// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "LiftGrabber.h"
#include "LiftGrabber_Config.h"

#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

LiftGrabber::LiftGrabber() : Subsystem("LiftGrabber") {
	myConfig = new LiftGrabber_Config();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	liftGrabberSolenoid = RobotMap::liftGrabberLiftGrabberSolenoid;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	RetrieveConfig();
	Configure();
	Open();
}
    
LiftGrabber::~LiftGrabber()
{
	delete myConfig;
}

void LiftGrabber::RetrieveConfig()
{
	myConfig->LiftGrabber_PCMID = Preferences::GetInstance()->GetInt("LiftGrabber::PCMID");
	myConfig->LiftGrabber_Solenoid = Preferences::GetInstance()->GetInt("LiftGrabber::Solenoid");
	myConfig->LiftGrabber_ActiveIsClosed = Preferences::GetInstance()->GetBoolean("LiftGrabber::ActiveIsClosed");
}

void LiftGrabber::StoreConfig()
{
	Preferences::GetInstance()->PutInt("LiftGrabber::PCMID",myConfig->LiftGrabber_PCMID);
	Preferences::GetInstance()->PutInt("LiftGrabber::Solenoid",myConfig->LiftGrabber_Solenoid);
	Preferences::GetInstance()->PutBoolean("LiftGrabber::ActiveIsClosed",myConfig->LiftGrabber_ActiveIsClosed);
}

void LiftGrabber::Configure()
{
	// Do Nothing
}

void LiftGrabber::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void LiftGrabber::Open()
{
	liftGrabberSolenoid->Set(!myConfig->LiftGrabber_ActiveIsClosed);
	opened = true;
}

void LiftGrabber::Close()
{
	liftGrabberSolenoid->Set(myConfig->LiftGrabber_ActiveIsClosed);
	opened = false;
}

void LiftGrabber::Toggle()
{
	if (Is_Open())
	{
		Close();
	} else
	{
		Open();
	}
}


bool LiftGrabber::Is_Open()
{
	return opened;
}

