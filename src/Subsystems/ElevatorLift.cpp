// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "ElevatorLift.h"
#include "ElevatorLift_Config.h"
#include "Commands/MoveElevatorLift.h"

#include "../Robot.h"
#include "../RobotMap.h"

ElevatorLift::ElevatorLift() : Subsystem("ElevatorLift") {
	myConfig = new ElevatorLift_Config();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	liftTalon = RobotMap::elevatorLiftLiftTalon;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	RetrieveConfig();
	Configure();
	Set_VoltageMode();
	beenHome = false;
	positioning = false;
	posErr = 0;
}
    
ElevatorLift::~ElevatorLift()
{
	delete myConfig;
}

void ElevatorLift::RetrieveConfig()
{
	myConfig->ElevatorLift_Rate = Preferences::GetInstance()->GetFloat("ElevatorLift::Rate");
	myConfig->ElevatorLift_LiftTalon_Enabled = Preferences::GetInstance()->GetBoolean("ElevatorLift::LiftTalon::Enabled");
	myConfig->ElevatorLift_LiftTalon_CANID = Preferences::GetInstance()->GetInt("ElevatorLift::LiftTalon::CANID");
	myConfig->ElevatorLift_LiftTalon_Reversed = Preferences::GetInstance()->GetBoolean("ElevatorLift::LiftTalon::Reversed");
	myConfig->ElevatorLift_LiftTalon_HasSensor = Preferences::GetInstance()->GetBoolean("ElevatorLift::LiftTalon::HasSensor");
	myConfig->ElevatorLift_LiftTalon_SensorReversed = Preferences::GetInstance()->GetBoolean("ElevatorLift::LiftTalon::SensorReversed");
	myConfig->ElevatorLift_LiftTalon_EnableSoftLimits = Preferences::GetInstance()->GetBoolean("ElevatorLift::LiftTalon::EnableSoftLimits");
	myConfig->ElevatorLift_LiftTalon_ForwardSoftLimit = Preferences::GetInstance()->GetInt("ElevatorLift::LiftTalon::ForwardSoftLimit");
	myConfig->ElevatorLift_LiftTalon_ReverseSoftLimit = Preferences::GetInstance()->GetInt("ElevatorLift::LiftTalon::ReverseSoftLimit");
	myConfig->ElevatorLift_LiftTalon_EnablePID = Preferences::GetInstance()->GetBoolean("ElevatorLift::LiftTalon::EnablePID");
	myConfig->ElevatorLift_LiftTalon_Profile_0_PID_P = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::0::PID::P");
	myConfig->ElevatorLift_LiftTalon_Profile_0_PID_I = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::0::PID::I");
	myConfig->ElevatorLift_LiftTalon_Profile_0_PID_D = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::0::PID::D");
	myConfig->ElevatorLift_LiftTalon_Profile_0_PID_F = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::0::PID::F");
	myConfig->ElevatorLift_LiftTalon_Profile_0_IZone = Preferences::GetInstance()->GetInt("ElevatorLift::LiftTalon::Profile::0::IZone");
	myConfig->ElevatorLift_LiftTalon_Profile_0_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("ElevatorLift::LiftTalon::Profile::0::EnableCLRampRate");
	myConfig->ElevatorLift_LiftTalon_Profile_0_CLRampRate = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::0::CLRampRate");
	myConfig->ElevatorLift_LiftTalon_Profile_1_PID_P = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::1::PID::P");
	myConfig->ElevatorLift_LiftTalon_Profile_1_PID_I = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::1::PID::I");
	myConfig->ElevatorLift_LiftTalon_Profile_1_PID_D = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::1::PID::D");
	myConfig->ElevatorLift_LiftTalon_Profile_1_PID_F = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::1::PID::F");
	myConfig->ElevatorLift_LiftTalon_Profile_1_IZone = Preferences::GetInstance()->GetInt("ElevatorLift::LiftTalon::Profile::1::IZone");
	myConfig->ElevatorLift_LiftTalon_Profile_1_EnableCLRampRate = Preferences::GetInstance()->GetBoolean("ElevatorLift::LiftTalon::Profile::1::EnableCLRampRate");
	myConfig->ElevatorLift_LiftTalon_Profile_1_CLRampRate = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::Profile::1::CLRampRate");
	myConfig->ElevatorLift_LiftTalon_EnableVoltRampRate = Preferences::GetInstance()->GetBoolean("ElevatorLift::LiftTalon::EnableVoltRampRate");
	myConfig->ElevatorLift_LiftTalon_VoltRampRate = Preferences::GetInstance()->GetDouble("ElevatorLift::LiftTalon::VoltRampRate");
	myConfig->ElevatorLift_LiftTalon_QuadEncoder_PulsesPerRot = Preferences::GetInstance()->GetInt("ElevatorLift::LiftTalon::QuadEncoder::PulsesPerRot");
	myConfig->ElevatorLift_LiftTalon_QuadEncoder_PulsesPerInch = Preferences::GetInstance()->GetFloat("ElevatorLift::LiftTalon::QuadEncoder::PulsesPerInch");
	myConfig->ElevatorLift_LiftTalon_QuadEncoder_TravelPulses = Preferences::GetInstance()->GetInt("ElevatorLift::LiftTalon::QuadEncoder::TravelPulses");
	myConfig->ElevatorLift_LiftTalon_PID_CL_PM_Error = Preferences::GetInstance()->GetInt("ElevatorLift::LiftTalon::PID::CL::PM::Error");

	myConfig->ToteHeight = Preferences::GetInstance()->GetFloat("ToteHeight");
	myConfig->LiftHeightFromFloor = Preferences::GetInstance()->GetFloat("LiftHeightFromFloor");
	myConfig->TotePick = Preferences::GetInstance()->GetFloat("TotePick");
	myConfig->LiftClearance = Preferences::GetInstance()->GetFloat("LiftClearance");
	myConfig->BinHeight = Preferences::GetInstance()->GetFloat("BinHeight");
	myConfig->BinPick = Preferences::GetInstance()->GetFloat("BinPick");
}

void ElevatorLift::StoreConfig()
{
	Preferences::GetInstance()->PutFloat("ElevatorLift::Rate",myConfig->ElevatorLift_Rate);
	Preferences::GetInstance()->PutBoolean("ElevatorLift::LiftTalon::Enabled",myConfig->ElevatorLift_LiftTalon_Enabled);
	Preferences::GetInstance()->PutInt("ElevatorLift::LiftTalon::CANID",myConfig->ElevatorLift_LiftTalon_CANID);
	Preferences::GetInstance()->PutBoolean("ElevatorLift::LiftTalon::Reversed",myConfig->ElevatorLift_LiftTalon_Reversed);
	Preferences::GetInstance()->PutBoolean("ElevatorLift::LiftTalon::HasSensor",myConfig->ElevatorLift_LiftTalon_HasSensor);
	Preferences::GetInstance()->PutBoolean("ElevatorLift::LiftTalon::SensorReversed",myConfig->ElevatorLift_LiftTalon_SensorReversed);
	Preferences::GetInstance()->PutBoolean("ElevatorLift::LiftTalon::EnableSoftLimits",myConfig->ElevatorLift_LiftTalon_EnableSoftLimits);
	Preferences::GetInstance()->PutInt("ElevatorLift::LiftTalon::ForwardSoftLimit",myConfig->ElevatorLift_LiftTalon_ForwardSoftLimit);
	Preferences::GetInstance()->PutInt("ElevatorLift::LiftTalon::ReverseSoftLimit",myConfig->ElevatorLift_LiftTalon_ReverseSoftLimit);
	Preferences::GetInstance()->PutBoolean("ElevatorLift::LiftTalon::EnablePID",myConfig->ElevatorLift_LiftTalon_EnablePID);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::0::PID::P",myConfig->ElevatorLift_LiftTalon_Profile_0_PID_P);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::0::PID::I",myConfig->ElevatorLift_LiftTalon_Profile_0_PID_I);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::0::PID::D",myConfig->ElevatorLift_LiftTalon_Profile_0_PID_D);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::0::PID::F",myConfig->ElevatorLift_LiftTalon_Profile_0_PID_F);
	Preferences::GetInstance()->PutInt("ElevatorLift::LiftTalon::Profile::0::IZone",myConfig->ElevatorLift_LiftTalon_Profile_0_IZone);
	Preferences::GetInstance()->PutBoolean("ElevatorLift::LiftTalon::Profile::0::EnableCLRampRate",myConfig->ElevatorLift_LiftTalon_Profile_0_EnableCLRampRate);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::0::CLRampRate",myConfig->ElevatorLift_LiftTalon_Profile_0_CLRampRate);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::1::PID::P",myConfig->ElevatorLift_LiftTalon_Profile_1_PID_P);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::1::PID::I",myConfig->ElevatorLift_LiftTalon_Profile_1_PID_I);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::1::PID::D",myConfig->ElevatorLift_LiftTalon_Profile_1_PID_D);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::1::PID::F",myConfig->ElevatorLift_LiftTalon_Profile_1_PID_F);
	Preferences::GetInstance()->PutInt("ElevatorLift::LiftTalon::Profile::1::IZone",myConfig->ElevatorLift_LiftTalon_Profile_1_IZone);
	Preferences::GetInstance()->PutBoolean("ElevatorLift::LiftTalon::Profile::1::EnableCLRampRate",myConfig->ElevatorLift_LiftTalon_Profile_1_EnableCLRampRate);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::Profile::1::CLRampRate",myConfig->ElevatorLift_LiftTalon_Profile_1_CLRampRate);
	Preferences::GetInstance()->PutBoolean("ElevatorLift::LiftTalon::EnableVoltRampRate",myConfig->ElevatorLift_LiftTalon_EnableVoltRampRate);
	Preferences::GetInstance()->PutDouble("ElevatorLift::LiftTalon::VoltRampRate",myConfig->ElevatorLift_LiftTalon_VoltRampRate);
	Preferences::GetInstance()->PutInt("ElevatorLift::LiftTalon::QuadEncoder::PulsesPerRot",myConfig->ElevatorLift_LiftTalon_QuadEncoder_PulsesPerRot);
	Preferences::GetInstance()->PutFloat("ElevatorLift::LiftTalon::QuadEncoder::PulsesPerInch",myConfig->ElevatorLift_LiftTalon_QuadEncoder_PulsesPerInch);
	Preferences::GetInstance()->PutInt("ElevatorLift::LiftTalon::QuadEncoder::TravelPulses",myConfig->ElevatorLift_LiftTalon_QuadEncoder_TravelPulses);
	Preferences::GetInstance()->PutInt("ElevatorLift::LiftTalon::PID::CL::PM::Error",myConfig->ElevatorLift_LiftTalon_PID_CL_PM_Error);

	Preferences::GetInstance()->PutFloat("ToteHeight",myConfig->ToteHeight);
	Preferences::GetInstance()->PutFloat("LiftHeightFromFloor",myConfig->LiftHeightFromFloor);
	Preferences::GetInstance()->PutFloat("TotePick",myConfig->TotePick);
	Preferences::GetInstance()->PutFloat("LiftClearance",myConfig->LiftClearance);
	Preferences::GetInstance()->PutFloat("BinHeight",myConfig->BinHeight);
	Preferences::GetInstance()->PutFloat("BinPick",myConfig->BinPick);

}

void ElevatorLift::Configure()
{
	if (!myConfig->ElevatorLift_LiftTalon_Enabled) return;

	if (myConfig->ElevatorLift_LiftTalon_HasSensor)
	{
		liftTalon->SetFeedbackDevice(CANTalon::QuadEncoder);
	    if (myConfig->ElevatorLift_LiftTalon_SensorReversed)
	    {
	    	liftTalon->SetSensorDirection(true);
	    } else
	    {
	    	liftTalon->SetSensorDirection(false);
	    }
	}

	if (myConfig->ElevatorLift_LiftTalon_EnablePID)
	{
		liftTalon->SelectProfileSlot(0);
		liftTalon->SetP(myConfig->ElevatorLift_LiftTalon_Profile_0_PID_P);
		liftTalon->SetI(myConfig->ElevatorLift_LiftTalon_Profile_0_PID_I);
		liftTalon->SetD(myConfig->ElevatorLift_LiftTalon_Profile_0_PID_D);
		liftTalon->SetF(myConfig->ElevatorLift_LiftTalon_Profile_0_PID_F);
		liftTalon->SetIzone(myConfig->ElevatorLift_LiftTalon_Profile_0_IZone);
		if (myConfig->ElevatorLift_LiftTalon_Profile_0_EnableCLRampRate)
		{
			liftTalon->SetCloseLoopRampRate(myConfig->ElevatorLift_LiftTalon_Profile_0_CLRampRate);
		}

		liftTalon->SelectProfileSlot(1);
		liftTalon->SetP(myConfig->ElevatorLift_LiftTalon_Profile_1_PID_P);
		liftTalon->SetI(myConfig->ElevatorLift_LiftTalon_Profile_1_PID_I);
		liftTalon->SetD(myConfig->ElevatorLift_LiftTalon_Profile_1_PID_D);
		liftTalon->SetF(myConfig->ElevatorLift_LiftTalon_Profile_1_PID_F);
		liftTalon->SetIzone(myConfig->ElevatorLift_LiftTalon_Profile_1_IZone);
		if (myConfig->ElevatorLift_LiftTalon_Profile_1_EnableCLRampRate)
		{
			liftTalon->SetCloseLoopRampRate(myConfig->ElevatorLift_LiftTalon_Profile_1_CLRampRate);
		}
	}


    if (myConfig->ElevatorLift_LiftTalon_EnableVoltRampRate)
    {
    	liftTalon->SetVoltageRampRate(myConfig->ElevatorLift_LiftTalon_VoltRampRate);
    }

	posErr = myConfig->ElevatorLift_LiftTalon_PID_CL_PM_Error;

	pulsesPerInch = myConfig->ElevatorLift_LiftTalon_QuadEncoder_PulsesPerInch;
	travel = myConfig->ElevatorLift_LiftTalon_QuadEncoder_TravelPulses;
    tote = myConfig->TotePick;
	clearance = myConfig->LiftClearance;
	rate = myConfig->ElevatorLift_Rate;

	liftTalon->ConfigFwdLimitSwitchNormallyOpen(true);
	liftTalon->ConfigRevLimitSwitchNormallyOpen(true);

	liftTalon->EnableControl();
}

void ElevatorLift::Set_PositionMode()
{
	liftTalon->SelectProfileSlot(1);
	liftTalon->SetControlMode(CANSpeedController::kPosition);
}

void ElevatorLift::Set_VoltageMode()
{
	liftTalon->SelectProfileSlot(0);
	liftTalon->SetControlMode(CANSpeedController::kPercentVbus);
}


void ElevatorLift::InitDefaultCommand() {
	SetDefaultCommand(new MoveElevatorLift());
}

void ElevatorLift::Set_LiftHome()
{
	/*
	int i = 0;
	double t = liftTalon->GetPosition();
	CANSpeedController::ControlMode curMode = liftTalon->GetControlMode();
	Set_PositionMode();
	Robot::brake->Release();
	liftTalon->EnableControl();
	while (liftTalon->GetReverseLimitOK())
	{
		liftTalon->Set(t - (i * 4));
		i++;
	}
	liftTalon->Disable();
    Robot::brake->Engage();
*/
    ZeroPoint = liftTalon->GetPosition();

	beenHome = true;
//	liftTalon->SetControlMode(curMode);
}

void ElevatorLift::Home()
{
	if (!beenHome) Set_LiftHome();
	if (Robot::brake->IsEngaged()) Robot::brake->Release();
	liftTalon->EnableControl();
	liftTalon->Set(ZeroPoint);

}

void ElevatorLift::MoveLift(float val)
{
	if (liftTalon->GetControlMode() != CANSpeedController::kPercentVbus)
	{
		positioning = false;
		Set_VoltageMode();
	}
	if (Robot::brake->IsEngaged()) Robot::brake->Release();
	liftTalon->EnableControl();
	liftTalon->Set(val*rate);
}

void ElevatorLift::MoveLiftToPosition(double pos)
{
	if (!positioning)
	{
		Set_PositionMode();
		positioning = true;
		cmdHeight = ZeroPoint + (pos * pulsesPerInch);
		if (Robot::brake->IsEngaged()) Robot::brake->Release();
		liftTalon->EnableControl();
		liftTalon->Set(cmdHeight);
	}
}

void ElevatorLift::MoveLiftToRelativePosition(double pos)
{
	if (!positioning)
	{
		Set_PositionMode();
		positioning = true;
		cmdHeight = liftTalon->GetPosition() + pos * pulsesPerInch;
		if (Robot::brake->IsEngaged()) Robot::brake->Release();
		liftTalon->EnableControl();
		liftTalon->Set(cmdHeight);
	}
}

bool ElevatorLift::AtCommandedPosition()
{
	if (!positioning) return true;
	double cpos = liftTalon->GetPosition();
//	printf("El:acp cpos %f cmdHeight %f cle %f poserr %d\n",cpos,cmdHeight, abs(cpos - cmdHeight),posErr);
	if (abs(cpos - cmdHeight) <= posErr ) return true;
	return false;
}

void ElevatorLift::StopLift()
{
	liftTalon->Disable();
	Robot::brake->Engage();
	positioning = false;
}

double ElevatorLift::Get_Position()
{
	if (!beenHome) return -256.0;
	return (liftTalon->GetPosition() - ZeroPoint) / pulsesPerInch;
}

bool ElevatorLift::AtBottom()
{
	return !liftTalon->GetReverseLimitOK();
}

bool ElevatorLift::AtTop()
{
	return !liftTalon->GetForwardLimitOK();
}

void ElevatorLift::Set_PosZero()
{
	if (AtBottom())
	{
		// liftTalon->SetPosition(0);
		ZeroPoint = liftTalon->GetPosition();
	}
}
